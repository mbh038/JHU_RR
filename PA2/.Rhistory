#par(mar = c(3, 4,1,1))
par(bg="white")
with(annual.totals,plot(Year,Fatalities.Injuries,
xlim=c(1950,2020),
ylim=c(0,max(annual.totals$Fatalities.Injuries)),
xlab="Year",
ylab="Annual fatalities and Injuries",
main="",
pch=19,
col="red",
main="Annual Fatalities and Injuries")
)
with(annual.totals,plot(Year,Damage,
xlim=c(1950,2020),
ylim=c(0,max(annual.totals$Damage)),
xlab="Year",
ylab="Annual fatalities and Injuries",
main="",
pch=19,
col="blue",
main="Annual property and crop damage ($)")
)
library(ggplot2)
par(mfrow = c(1, 2),oma = c(0, 0, 2, 0)))
#par(mar = c(3, 4,1,1))
par(bg="white")
with(annual.totals,plot(Year,Fatalities.Injuries,
xlim=c(1950,2020),
ylim=c(0,max(annual.totals$Fatalities.Injuries)),
xlab="Year",
ylab="Annual fatalities and Injuries",
pch=19,
col="red",
main="Annual Fatalities and Injuries")
)
with(annual.totals,plot(Year,Damage,
xlim=c(1950,2020),
ylim=c(0,max(annual.totals$Damage)),
xlab="Year",
ylab="Annual fatalities and Injuries",
pch=19,
col="blue",
main="Annual property and crop damage ($)")
)
library(ggplot2)
par(mfrow = c(1, 2),oma = c(0, 0, 2, 0)))
#par(mar = c(3, 4,1,1))
par(bg="white")
with(annual.totals,plot(Year,Fatalities.Injuries,
xlim=c(1950,2020),
ylim=c(0,max(annual.totals$Fatalities.Injuries)),
xlab="Year",
ylab="Annual fatalities and Injuries",
pch=19,
col="red",
main="Fatalities / Injuries")
)
with(annual.totals,plot(Year,Damage,
xlim=c(1950,2020),
ylim=c(0,max(annual.totals$Damage)),
xlab="Year",
ylab="Annual fatalities and Injuries",
pch=19,
col="blue",
main="Property and crop damage ($)")
)
mtext("Title for Two Plots", outer = TRUE, cex = 1.5)
library(ggplot2)
par(mfrow = c(1, 2),oma = c(0, 0, 2, 0)))
#par(mar = c(3, 4,1,1))
par(bg="white")
with(annual.totals,plot(Year,Fatalities.Injuries,
xlim=c(1950,2020),
ylim=c(0,max(annual.totals$Fatalities.Injuries)),
xlab="Year",
ylab="Annual fatalities and Injuries",
pch=19,
col="red",
#main="Fatalities / Injuries")
)
with(annual.totals,plot(Year,Damage,
xlim=c(1950,2020),
ylim=c(0,max(annual.totals$Damage)),
xlab="Year",
ylab="Annual fatalities and Injuries",
pch=19,
col="blue",
#main="Property and crop damage ($)")
)
mtext("Title for Two Plots", outer = TRUE, cex = 1.5)
library(ggplot2)
par(mfrow = c(1, 2),oma = c(0, 0, 2, 0)))
#par(mar = c(3, 4,1,1))
par(bg="white")
with(annual.totals,plot(Year,Fatalities.Injuries,
xlim=c(1950,2020),
ylim=c(0,max(annual.totals$Fatalities.Injuries)),
xlab="Year",
ylab="Annual fatalities and Injuries",
pch=19,
col="red",
#main="Fatalities / Injuries"
)
)
with(annual.totals,plot(Year,Damage,
xlim=c(1950,2020),
ylim=c(0,max(annual.totals$Damage)),
xlab="Year",
ylab="Annual fatalities and Injuries",
pch=19,
col="blue",
#main="Property and crop damage ($)"
)
)
mtext("Title for Two Plots", outer = TRUE, cex = 1.5)
,oma = c(0, 0, 2, 0))
library(ggplot2)
par(mfrow = c(1, 2)))
par(mar = c(3, 4,1,1))
par(bg="white")
with(annual.totals,plot(Year,Fatalities.Injuries,
xlim=c(1950,2020),
ylim=c(0,max(annual.totals$Fatalities.Injuries)),
xlab="Year",
ylab="Annual fatalities and Injuries",
pch=19,
col="red",
#main="Fatalities / Injuries"
)
)
with(annual.totals,plot(Year,Damage,
xlim=c(1950,2020),
ylim=c(0,max(annual.totals$Damage)),
xlab="Year",
ylab="Annual fatalities and Injuries",
pch=19,
col="blue",
#main="Property and crop damage ($)"
)
)
mtext("Title for Two Plots", outer = TRUE, cex = 1.5)
library(ggplot2)
par(mfrow = c(1, 2)))
par(mar = c(3, 4,1,1))
par(bg="white")
with(annual.totals,plot(Year,Fatalities.Injuries,
xlim=c(1950,2020),
ylim=c(0,max(annual.totals$Fatalities.Injuries)),
xlab="Year",
ylab="Annual fatalities and Injuries",
pch=19,
col="red",
#main="Fatalities / Injuries"
)
)
with(annual.totals,plot(Year,Damage,
xlim=c(1950,2020),
ylim=c(0,max(annual.totals$Damage)),
xlab="Year",
ylab="Annual fatalities and Injuries",
pch=19,
col="blue",
#main="Property and crop damage ($)"
)
)
mtext("Title for Two Plots", outer = TRUE, cex = 1.5)
library(ggplot2)
par(mfrow = c(1, 2))
par(mar = c(3, 4,1,1))
par(bg="white")
with(annual.totals,plot(Year,Fatalities.Injuries,
xlim=c(1950,2020),
ylim=c(0,max(annual.totals$Fatalities.Injuries)),
xlab="Year",
ylab="Annual fatalities and Injuries",
pch=19,
col="red",
#main="Fatalities / Injuries"
)
)
with(annual.totals,plot(Year,Damage,
xlim=c(1950,2020),
ylim=c(0,max(annual.totals$Damage)),
xlab="Year",
ylab="Annual fatalities and Injuries",
pch=19,
col="blue",
#main="Property and crop damage ($)"
)
)
mtext("Title for Two Plots", outer = TRUE, cex = 1.5)
library(ggplot2)
par(mfrow = c(1, 2))
par(mar = c(3, 4,2,1))
par(bg="white")
with(annual.totals,plot(Year,Fatalities.Injuries,
xlim=c(1950,2020),
ylim=c(0,max(annual.totals$Fatalities.Injuries)),
xlab="Year",
ylab="Annual fatalities and Injuries",
pch=19,
col="red",
#main="Fatalities / Injuries"
)
)
with(annual.totals,plot(Year,Damage,
xlim=c(1950,2020),
ylim=c(0,max(annual.totals$Damage)),
xlab="Year",
ylab="Annual fatalities and Injuries",
pch=19,
col="blue",
#main="Property and crop damage ($)"
)
)
mtext("Title for Two Plots", outer = TRUE, cex = 1.5)
library(ggplot2)
par(mfrow = c(1, 2))
par(mar = c(3, 4,3,1))
par(bg="white")
with(annual.totals,plot(Year,Fatalities.Injuries,
xlim=c(1950,2020),
ylim=c(0,max(annual.totals$Fatalities.Injuries)),
xlab="Year",
ylab="Annual fatalities and Injuries",
pch=19,
col="red",
#main="Fatalities / Injuries"
)
)
with(annual.totals,plot(Year,Damage,
xlim=c(1950,2020),
ylim=c(0,max(annual.totals$Damage)),
xlab="Year",
ylab="Annual fatalities and Injuries",
pch=19,
col="blue",
#main="Property and crop damage ($)"
)
)
mtext("Title for Two Plots", outer = TRUE, cex = 1.5)
library(lubridate)
year<-as.POSIXlt(mdy_hms(df2$BGN_DATE))
year<-year$year+1900
summary(year) # check this looks OK.
# include this column in the reduced data set df2
sd,red<-data.frame(year,df2)
library(lubridate)
year<-as.POSIXlt(mdy_hms(df2$BGN_DATE))
year<-year$year+1900
summary(year) # check this looks OK.
# include this column in the reduced data set df2
sd.red<-data.frame(year,df2)
fit.i<-aggregate(sd.red$INJURIES,by=list(sd.red$year),FUN="sum")
fit.f<-aggregate(sd.red$FATALITIES,by=list(sd.red$year),FUN="sum")
fit<-data.frame(fit.i$Group.1,fit.i$x+fit.f$x)
summary(fit)
names(fit)[names(fit)=="fit.i.Group.1"] <- "Year"
names(fit)[names(fit)=="fit.i.x...fit.f.x"] <- "Fatalities.Injuries"
pt<-aggregate(sd.red$PROPDMG,by=list(sd.red$year),FUN="sum")
ct<-aggregate(sd.red$CROPDMG,by=list(sd.red3$year),FUN="sum")
pct<-data.frame(pt$Group.1,pt$x+ct$x)
summary(pct)
names(pct)[names(pct)=="pt.Group.1"] <- "Year"
names(pct)[names(pct)=="pt.x...ct.x"] <- "Totals"
pt<-aggregate(sd.red$PROPDMG,by=list(sd.red$year),FUN="sum")
ct<-aggregate(sd.red$CROPDMG,by=list(sd.red3$year),FUN="sum")
pct<-data.frame(pt$Group.1,pt$x+ct$x)
summary(pct)
names(pct)[names(pct)=="pt.Group.1"] <- "Year"
names(pct)[names(pct)=="pt.x...ct.x"] <- "Totals"
pt<-aggregate(sd.red$PROPDMG,by=list(sd.red$year),FUN="sum")
ct<-aggregate(sd.red$CROPDMG,by=list(sd.red$year),FUN="sum")
pct<-data.frame(pt$Group.1,pt$x+ct$x)
summary(pct)
names(pct)[names(pct)=="pt.Group.1"] <- "Year"
names(pct)[names(pct)=="pt.x...ct.x"] <- "Totals"
annual.totals<-fit
annual.totals$Damage<-pct$Totals
#names(annual.totals)[names(annual.totals)=="pct$Total.Damage"] <- "Total.Damage"
str(annual.totals)
library(ggplot2)
par(mfrow = c(1, 2))
par(mar = c(3, 4,3,1))
par(bg="white")
with(annual.totals,plot(Year,Fatalities.Injuries,
xlim=c(1950,2020),
ylim=c(0,max(annual.totals$Fatalities.Injuries)),
xlab="Year",
ylab="Annual fatalities and Injuries",
pch=19,
col="red",
main="Fatalities / Injuries"
)
)
with(annual.totals,plot(Year,Damage,
xlim=c(1950,2020),
ylim=c(0,max(annual.totals$Damage)),
xlab="Year",
ylab="Annual fatalities and Injuries",
pch=19,
col="blue",
main="Property and crop damage ($)"
)
)
evtype.recorded<-nrow(distinct(sd.red$EVTYPE))
evtype.recorded<-nrow(unique(sd.red$EVTYPE))
evtype.recorded
str(sd.red)
x<-c("a","a")
count(x)
length(x)
u<-unique(x)
length(u)
str(x)
x<-unique(sd.red$EVTYPE)
length(x)
evtype.recorded<-length(distinct(sd.red$EVTYPE))
evtype.recorded
evtype.recorded<-length(unique(sd.red$EVTYPE))
evtype.recorded
evtype
evtype.recorded<-length(unique(sd.red$EVTYPE))
evtype<-c(
"Astronomical Low Tide",
+"Avalanche",
+"Blizzard",
+"Coastal Flood",
+"Cold/Wind Chill",
+"Debris Flow",
+"Dense Fog",
+"Dense Smoke",
+"Drought",
+"Dust Devil",
+"Dust Storm",
+"Excessive Heat",
+"Extreme Cold/Wind Chill",
+"Flash Flood",
+"Flood",
+"Frost/Freeze",
+"Funnel Cloud",
+"Freezing Fog",
+"Hail",
+"Heat",
+"Heavy Snow",
+"High Surf",
+"High Wind",
+"Hurricane (Typhoon)",
+"Ice Storm",
+"Lake-Effect Snow",
+"Lakeshore Flood",
+"Lightning",
+"Marine Hail",
+"Marine High Wind",
+"Marine Strong Wind",
+"Marine Thunderstorm Wind",
+"Rip Current",
+"Seiche",
+"Sleet",
+"Storm Surge/Tide",
+"Strong Wind",
+"Thunderstorm Wind",
+"Tornado",
+"Tropical Depression",
+"Tropical Storm",
+"Tsunami",
+"Volcanic Ash",
+"Waterspout",
+"Wildfire",
+"Winter Storm",
+"Winter Weather"
)
evtype
evtype<-c(
"Astronomical Low Tide",
"Avalanche",
+"Blizzard",
+"Coastal Flood",
+"Cold/Wind Chill",
+"Debris Flow",
+"Dense Fog",
+"Dense Smoke",
+"Drought",
+"Dust Devil",
+"Dust Storm",
+"Excessive Heat",
+"Extreme Cold/Wind Chill",
+"Flash Flood",
+"Flood",
+"Frost/Freeze",
+"Funnel Cloud",
+"Freezing Fog",
+"Hail",
+"Heat",
+"Heavy Snow",
+"High Surf",
+"High Wind",
+"Hurricane (Typhoon)",
+"Ice Storm",
+"Lake-Effect Snow",
+"Lakeshore Flood",
+"Lightning",
+"Marine Hail",
+"Marine High Wind",
+"Marine Strong Wind",
+"Marine Thunderstorm Wind",
+"Rip Current",
+"Seiche",
+"Sleet",
+"Storm Surge/Tide",
+"Strong Wind",
+"Thunderstorm Wind",
+"Tornado",
+"Tropical Depression",
+"Tropical Storm",
+"Tsunami",
+"Volcanic Ash",
+"Waterspout",
+"Wildfire",
+"Winter Storm",
+"Winter Weather"
)
evtype
```
evtype<-c("Astronomical Low Tide","Avalanche","Blizzard","Coastal Flood","Cold/Wind Chill","Debris Flow","Dense Fog","Dense Smoke","Drought","Dust Devil","Dust Storm","Excessive Heat","Extreme Cold/Wind Chill","Flash Flood","Flood","Frost/Freeze","Funnel Cloud","Freezing Fog","Hail","Heat","Heavy Snow","High Surf","High Wind","Hurricane (Typhoon)","Ice Storm","Lake-Effect Snow","Lakeshore Flood","Lightning","Marine Hail","Marine High Wind","Marine Strong Wind","Marine Thunderstorm Wind","Rip Current","Seiche","Sleet","Storm Surge/Tide","Strong Wind","Thunderstorm Wind","Tornado","Tropical Depression","Tropical Storm","Tsunami","Volcanic Ash","Waterspout","Wildfire","Winter Storm","Winter Weather")
evtype
?gsub
grep("Tide","Low Tide")
evtype.recorded<-length(unique(sd.red$EVTYPE))
# then we cycle through the EVTYPE column in our reduced set and allocate each row to # one of the above categories if EVTYPE contains
f<-function(x){
s<-grepl("x",sd.red$EVTYPE,ignore.case=TRUE)
}
t<-sapply(evtype[],f)
str(t)
head(t)
rm(t)
# then we cycle through the EVTYPE column in our reduced set and allocate each row to  whichever (If any) of the above categories contains it.
f<-function(x){
s<-grepl("x",sd.red$EVTYPE,ignore.case=TRUE)
}
t<-sapply(evtype[],f)
n.evtype=sum(t[,1])
sum(t[,1])
n.evtype<-colsums(t)
n.evtype<-colSums(t)
n.evtype
# then we cycle through the EVTYPE column in our reduced set and allocate each row to  whichever (If any) of the above categories contains it.
f<-function(x){
s<-grepl(evtype[x],sd.red$EVTYPE,ignore.case=TRUE)
}
t<-sapply(evtype[1:length(evtype)],f)
n.evtype<-colSums(t)
n.evtype
n.evtype<-colSums(t,na.rm=TRUE)
n.evtype
str(t)
f<-function(x){
s<-grepl(x,sd.red$EVTYPE,ignore.case=TRUE)
}
t<-sapply(evtype[1:length(evtype)],f)
n.evtype<-colSums(t,na.rm=TRUE)
n.evtype
sum(n.evtype)
head(t[,1])
f<-function(x){
s[(which(isTRUE(t[,x])]<-evtype[x]
}
ev.red<-sapply(x,f)
f<-function(x){
s[(which(isTRUE(t[,x]))]<-evtype[x]
}
ev.red<-sapply(x,f)
f<-function(x){
s[which(isTRUE(t[,x])]<-evtype[x]
}
ev.red<-sapply(x,f)
t<-sapply(evtype[1:length(evtype)],f)
n.evtype<-colSums(t,na.rm=TRUE)
sum(n.evtype)
f<-function(x){
s[which(isTRUE(t[,x])]<-evtype[x]
}
ev.red<-sapply(x,f)
f<-function(x){
s[which(isTRUE(t[,x])]<-evtype[x]
}
ev.red<-sapply(c(1:length(evtype)),f)
str(ev.red)
sum(ev.red)
sum(t[,5])
f<-function(x){
which(isTRUE(t[,x])<-evtype[x]
}
ev.red<-sap
which(isTRUE(t[,5])<-evtype[5]
f<-function(x){
which(isTRUE(t[,x]))<-evtype[x]
}
ev.red<-sapply(c(1:length(evtype)),f)
?which
"q"*1
n.evtype<-colSums(t,na.rm=TRUE)
r.evtype<-rowSums(t,na.rm=TRUE)
sum(n.evtype)
sum(r.evtype[]>1)
sum(r.evtype)
hist(r.evtype)
f<-function(x){
which(isTRUE(t[,x]))<-evtype[x]
}
ev.red<-sapply(c(1:length(evtype)),f)
